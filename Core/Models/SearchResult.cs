using System.Text.Json;

namespace Core.Models;

/// <summary>
/// Domain model for search results - represents a single search operation and its results
/// This follows Domain-Driven Design principles with encapsulated business logic
/// </summary>
public class SearchResult
{
    /// <summary>
    /// Primary key - auto-generated by database
    /// </summary>
    public int Id { get; set; }

    /// <summary>
    /// The search term that was used (e.g., "land registry search")
    /// Required field, max length 500 characters
    /// </summary>
    public string SearchTerm { get; set; } = string.Empty;

    /// <summary>
    /// The target URL being searched for (e.g., "www.infotrack.co.uk")
    /// Required field, max length 1000 characters
    /// Stored in lowercase for consistent matching
    /// </summary>
    public string TargetUrl { get; set; } = string.Empty;

    /// <summary>
    /// JSON serialized array of positions where the URL was found
    /// Examples: "[1,15,23]" or "[]" if not found
    /// Stored as nvarchar(max) in database for flexibility
    /// </summary>
    public string Positions { get; set; } = string.Empty;

    /// <summary>
    /// When the search was performed (UTC)
    /// Used for historical tracking and trend analysis
    /// </summary>
    public DateTime SearchDate { get; set; }

    /// <summary>
    /// Total number of search results analyzed (typically 100)
    /// Used for analytics and reporting
    /// </summary>
    public int TotalResults { get; set; }
    
    /// <summary>
    /// Business logic method to deserialize positions from JSON
    /// Returns empty list if positions is null/empty or invalid JSON
    /// Encapsulates the complexity of JSON handling
    /// </summary>
    public IEnumerable<int> GetPositionsArray()
    {
        if (string.IsNullOrEmpty(Positions))
            return new List<int>();

        try
        {
            var positions = JsonSerializer.Deserialize<IEnumerable<int>>(Positions);
            return positions ?? new List<int>();
        }
        catch (JsonException)
        {
            return new List<int>();
        }
    }
    
    /// <summary>
    /// Business logic method to serialize positions to JSON
    /// Encapsulates the JSON serialization logic
    /// </summary>
    public void SetPositionsArray(IEnumerable<int> positions)
    {
        if (positions == null)
        {
            Positions = "[]";
            return;
        }

        try
        {
            Positions = JsonSerializer.Serialize(positions.OrderBy(p => p).ToList());
        }
        catch (JsonException)
        {
            Positions = "[]";
        }
    }
}